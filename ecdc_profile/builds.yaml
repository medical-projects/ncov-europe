# Define locations for which builds should be created.
# For each build we specify a subsampling scheme via an explicit key.
# If the name of the focal geography differs from the build name this needs to
# be specified explicity as geographic_name. In addition, we require the
# geographic scale the build focuses on. Together name and scale serve a look-up
# in the geo_hierarchy to define region, country, division, etc
builds:
  global:
    subsampling_scheme: region_global

  europe:
    subsampling_scheme: custom_region
    geographic_scale: region
    region: Europe

  russia:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Russia
  serbia:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Serbia
  latvia:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Latvia
  slovakia:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Slovakia
  slovenia:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Slovenia
  poland:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Poland
  belarus:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Belarus
  estonia:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Estonia
  lithuania:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Lithuania
  hungary:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Hungary
  croatia:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Croatia
  france:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: France
  iceland:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Iceland
  norway:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Norway
  denmark:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Denmark
  netherlands:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Netherlands
  belgium:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Belgium
  luxembourg:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Luxembourg
  germany:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Germany
  austria:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Austria
  switzerland:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Switzerland
  italy:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Italy
  spain:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Spain
  czech-republic:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Czech Republic
  united-kingdom:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: United Kingdom
  ireland:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Ireland
  finland:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Finland
  sweden:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Sweden
  portugal:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Portugal
  greece:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Greece
  israel:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Israel
  romania:
    subsampling_scheme: custom_country
    geographic_scale: country
    region: Europe
    country: Romania

title: "Phylogenetic analysis of SARS-CoV-2 diversity in Europe"

traits:
  default:
    sampling_bias_correction: 2.5
    columns: ["region_exposure"]

exposure:
  default:
    trait: "region"
    exposure: "region_exposure"

refine:
  root: "best"

files:
  colors: "ecdc_profile/colors.tsv"
  auspice_config: "ecdc_profile/auspice_config_ecdc.json"
  description: "ecdc_profile/description.md"


subsampling:
  # Custom subsampling logic for regions like Europe where grouping by country
  # is the smallest resolution required.
  custom_region:
    # Focal samples for region
    region_early:
      group_by: "country year month"
      max_sequences: 500
      query: "--query 'region=={region} and date < 2020.4'"
    # Contextual samples for region from the rest of the world
    global_early:
      group_by: "country year month"
      max_sequences: 500
      query: "--query 'region!={region} and date < 2020.4'"
      priorities:
        type: "proximity"
        focus: "region_late"

    # Focal samples for region
    region_late:
      group_by: "country year month"
      max_sequences: 1500
      query: "--query 'region=={region} and date >= 2020.4'"
    # Contextual samples for region from the rest of the world
    global_late:
      group_by: "country year month"
      max_sequences: 500
      query: "--query 'region!={region} and date >= 2020.4'"
      priorities:
        type: "proximity"
        focus: "region_late"


  # Default subsampling logic for countries
  custom_country:
    # Focal samples for country
    country:
      group_by: "division year month"
      max_sequences: 1000
      exclude: "--exclude-where 'country!={country}'"
    # Contextual samples from country's region
    region:
      group_by: "country year month"
      max_sequences: 1250
      exclude: "--exclude-where 'country={country}' 'region!={region}'"
      priorities:
        type: "proximity"
        focus: "country"
    # Contextual samples from the rest of the world,
    # excluding the current region to avoid resampling.
    global:
      group_by: "country year month"
      max_sequences: 750
      exclude: "--exclude-where 'region={region}'"
      priorities:
        type: "proximity"
        focus: "country"
